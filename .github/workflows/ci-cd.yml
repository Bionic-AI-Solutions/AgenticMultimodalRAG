name: CI/CD Pipeline - Agentic Multimodal RAG

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =============================================================================
  # CODE QUALITY AND TESTING
  # =============================================================================
  test:
    name: Test and Code Quality
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: |
        poetry install --no-interaction --no-ansi

    - name: Set up test environment
      run: |
        echo "TEST_DB_NAME=test_db" >> $GITHUB_ENV
        echo "TEST_REDIS_DB=1" >> $GITHUB_ENV
        echo "POSTGRES_HOST=localhost" >> $GITHUB_ENV
        echo "POSTGRES_PORT=5432" >> $GITHUB_ENV
        echo "POSTGRES_USER=postgres" >> $GITHUB_ENV
        echo "POSTGRES_PASSWORD=postgres" >> $GITHUB_ENV
        echo "REDIS_HOST=localhost" >> $GITHUB_ENV
        echo "REDIS_PORT=6379" >> $GITHUB_ENV
        echo "REDIS_PASSWORD=" >> $GITHUB_ENV
        echo "MILVUS_HOST=localhost" >> $GITHUB_ENV
        echo "MILVUS_PORT=19530" >> $GITHUB_ENV
        echo "MINIO_HOST=localhost" >> $GITHUB_ENV
        echo "MINIO_PORT=9000" >> $GITHUB_ENV
        echo "MINIO_ACCESS_KEY=minioadmin" >> $GITHUB_ENV
        echo "MINIO_SECRET_KEY=minioadmin123" >> $GITHUB_ENV
        echo "NEO4J_URI=bolt://localhost:7687" >> $GITHUB_ENV
        echo "NEO4J_AUTH=neo4j/neo4j" >> $GITHUB_ENV
        echo "HF_HOME=/tmp/models" >> $GITHUB_ENV
        echo "TRANSFORMERS_CACHE=/tmp/models" >> $GITHUB_ENV
        echo "MODEL_DIR=/tmp/models" >> $GITHUB_ENV

    - name: Lint with flake8
      run: |
        poetry run flake8 app tests scripts --count --select=E9,F63,F7,F82 --show-source --statistics
        poetry run flake8 app tests scripts --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Format check with black
      run: |
        poetry run black --check app tests scripts

    # Temporarily disabled mypy to focus on Docker build
    # - name: Type check with mypy
    #   run: |
    #     poetry run mypy app/ --ignore-missing-imports --explicit-package-bases

    - name: Security check with bandit
      run: |
        poetry run bandit -r . -f json -o bandit-report.json || true

    - name: Run unit tests
      run: |
        poetry run pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # =============================================================================
  # DOCKER BUILD AND PUSH
  # =============================================================================
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        include:
          - variant: latest
            tag: latest
          - variant: version
            tag: ${{ github.ref_name }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ github.ref_name }}

  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # =============================================================================
  # NOTIFICATION
  # =============================================================================
  notify:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.build-and-push.result == 'success'
      run: |
        echo "‚úÖ Build and push successful!"
        echo "üöÄ Agentic Multimodal RAG System Docker image built and pushed"
        echo "üìä Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
        echo "üê≥ Docker Hub: https://hub.docker.com/r/${{ env.IMAGE_NAME }}"
        echo ""
        echo "üìã Next steps:"
        echo "1. Pull the image on your K3s cluster:"
        echo "   docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
        echo "2. Deploy using the provided scripts:"
        echo "   ./scripts/deploy.sh deploy ${{ github.ref_name }}"
        echo "3. Or use Rancher UI for deployment"
        
    - name: Notify Failure
      if: needs.build-and-push.result == 'failure'
      run: |
        echo "‚ùå Build and push failed!"
        echo "üîç Check the logs for more details"
        exit 1
